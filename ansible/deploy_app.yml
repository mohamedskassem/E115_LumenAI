---
# ansible/deploy_app.yml
- name: Deploy Text-to-SQL Application to Kubernetes
  hosts: localhost # Run on the machine executing ansible (uses local kubectl context)
  gather_facts: no # We don't need system facts for K8s deployment

  vars:
    # Define variables for Kubernetes manifests path and image details
    k8s_manifest_dir: "../k8s" # Path relative to the playbook file
    # Use Jinja template default filter if var is not passed via --extra-vars
    # Default to Git SHA if running in GitHub Actions, otherwise default to latest
    docker_image_tag: "{{ image_tag | default(github.sha | default('latest')) }}"
    docker_image_repo: "us-central1-docker.pkg.dev/cs115-449919/lumen-ai-repo/text-to-sql-app"
    docker_image_full: "{{ docker_image_repo }}:{{ docker_image_tag }}"

  tasks:
    - name: Ensure kubectl context is set (Informational)
      ansible.builtin.command: kubectl config current-context
      register: kubectl_context
      changed_when: false # This command doesn't change state

    - name: Display current kubectl context
      ansible.builtin.debug:
        msg: "Deploying to Kubernetes context: {{ kubectl_context.stdout }}"

    - name: Check for required API Key Environment Variables
      ansible.builtin.fail:
        msg: "Required environment variable '{{ item }}' is not set."
      when: lookup('env', item) is none or lookup('env', item) | length == 0
      loop:
        - GOOGLE_API_KEY_SECRET
        - OPENAI_API_KEY_SECRET
      run_once: yes # Only check once

    - name: Delete existing api-keys secret (if it exists)
      community.kubernetes.k8s:
        state: absent
        kind: Secret
        name: api-keys
        namespace: default # Specify namespace
      ignore_errors: yes # Ignore if secret doesn't exist

    - name: Create api-keys secret from environment variables
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: api-keys
            namespace: default # Specify namespace
          type: Opaque
          # Use lookup to get env vars; b64encode filter is NOT needed here,
          # the k8s module handles encoding for stringData.
          stringData:
            google_api_key.txt: "{{ lookup('env', 'GOOGLE_API_KEY_SECRET') }}"
            openai_api_key.txt: "{{ lookup('env', 'OPENAI_API_KEY_SECRET') }}"

    - name: Apply PersistentVolumeClaims
      community.kubernetes.k8s:
        state: present
        # Use path relative to playbook dir
        src: "{{ playbook_dir }}/../k8s/pvc.yaml"
        namespace: default # Specify namespace

    # Note: We are NOT applying secrets.yaml here.
    # The 'api-keys' secret must be created manually in the cluster.

    - name: Apply Deployment (using template to inject image tag)
      community.kubernetes.k8s:
        state: present
        # Render the Jinja2 template and apply the resulting definition
        definition: "{{ lookup('template', '../k8s/deployment.yaml.j2') | from_yaml }}"
        namespace: default # Specify namespace

    - name: Apply Service
      community.kubernetes.k8s:
        state: present
        # Use path relative to playbook dir
        src: "{{ playbook_dir }}/../k8s/service.yaml"
        namespace: default # Specify namespace

    - name: Wait for Deployment rollout to complete
      community.kubernetes.k8s_info:
        kind: Deployment
        name: text-to-sql-app-deployment
        namespace: default # Specify namespace
        wait: yes
        wait_sleep: 10
        wait_timeout: 300 # 5 minutes
      register: deployment_status
      until: "deployment_status.resources | length > 0 and deployment_status.resources[0].status.readyReplicas is defined and deployment_status.resources[0].status.readyReplicas == deployment_status.resources[0].spec.replicas"
      retries: 5 # Retry check if needed
      delay: 5 # Wait before retrying

    - name: Get Service Information
      community.kubernetes.k8s_info:
        kind: Service
        name: text-to-sql-app-service
        namespace: default # Specify namespace
      register: service_info

    - name: Display Service External IP (if available)
      ansible.builtin.debug:
        msg: "Access application at: http://{{ item.status.loadBalancer.ingress[0].ip }}"
      loop: "{{ service_info.resources }}"
      when: item.status.loadBalancer.ingress is defined and item.status.loadBalancer.ingress | length > 0 and item.status.loadBalancer.ingress[0].ip is defined

  # Optional: Handlers can be used to trigger actions like waiting for rollout
  # handlers:
  #   - name: Wait for deployment rollout
  #     community.kubernetes.k8s_info:
  #       kind: Deployment
  #       name: text-to-sql-app-deployment
  #       wait: yes
  #       wait_timeout: 300 