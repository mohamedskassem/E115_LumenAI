# k8s/secrets.yaml
# IMPORTANT: This file defines the *structure* of the secrets.
# Do NOT commit real API keys here.
# Create the actual secrets in your Kubernetes cluster using kubectl:
#
# 1. Create base64 encoded versions of your keys:
#    echo -n 'YOUR_OPENAI_API_KEY' | base64
#    echo -n 'YOUR_GOOGLE_API_KEY' | base64
#    (For google_api_key.json, encode the entire file content):
#    base64 -i /path/to/your/google_api_key.json
#
# 2. Create a secret manifest (e.g., my-secrets.yaml) like this, replacing the values:
#    apiVersion: v1
#    kind: Secret
#    metadata:
#      name: api-keys
#    type: Opaque
#    data:
#      OPENAI_API_KEY: <base64-encoded-openai-key>
#      GOOGLE_API_KEY: <base64-encoded-google-key>
#      # If using JSON key file:
#      # google_api_key.json: <base64-encoded-json-file-content>
#
# 3. Apply the secret manifest:
#    kubectl apply -f my-secrets.yaml
#
# --- Placeholder Definition (Structure Only) ---
apiVersion: v1
kind: Secret
metadata:
  name: api-keys # Name used to reference these secrets in the Deployment
type: Opaque
data:
  # These keys correspond to the environment variables your app expects
  # The values here are just placeholders, they will be overwritten by the actual secret creation
  OPENAI_API_KEY: ImZha2Uta2V5Ig== # base64 encoded "fake-key"
  GOOGLE_API_KEY: ImZha2Uta2V5Ig== # base64 encoded "fake-key"
  # Optional: If using GOOGLE_APPLICATION_CREDENTIALS with a JSON file:
  # google_api_key.json: e30= # base64 encoded empty json '{}' 