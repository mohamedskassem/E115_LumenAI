name: Python CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"
        cache: 'pip' # Enable caching for pip installs based on requirements file
        cache-dependency-path: src/app/dev-requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/app/dev-requirements.txt

    - name: List installed packages
      run: pip list

    - name: Show pytest-mock details
      run: pip show pytest-mock

    - name: Lint with flake8
      run: |
        # Check for critical errors (Syntax, Undefined Names - excluding F824)
        python -m flake8 src/app --count --select=E9,F63,F7 --show-source --statistics
        # Check for other style issues (ignore F824 again)
        python -m flake8 src/app --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics --extend-ignore=F824

    - name: Test with pytest and Generate Coverage Report
      run: |
        python -m pytest \
          --cov=src/app \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          tests

    # Optional: Upload coverage reports to Codecov
    # - name: Upload coverage reports to Codecov
    #   uses: codecov/codecov-action@v4.0.1
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }} # Create this secret in GitHub settings
    #     # Optional: specify coverage file if not coverage.xml
    #     # files: ./coverage.xml
    #     # Optional: flags for categorizing coverage
    #     # flags: unittests
    #     # Optional: name for the commit
    #     # name: codecov-umbrella
    #     # Optional: fail if upload fails
    #     # fail_ci_if_error: true

  deploy:
    # Depends on the build job passing
    needs: build
    # Run only on pushes to the main branch
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write' # Needed for google-github-actions/auth

    steps:
    - uses: actions/checkout@v4

    - name: 'Authenticate to Google Cloud'
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Install gke-gcloud-auth-plugin
      run: gcloud components install gke-gcloud-auth-plugin --quiet

    - name: 'Configure Docker for GAR'
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and Push Docker image
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: ./src/app # Build context is the app directory
        file: ./src/app/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        # Prioritize SHA tag, also push latest
        tags: |
          us-central1-docker.pkg.dev/cs115-449919/lumen-ai-repo/text-to-sql-app:${{ github.sha }}
          us-central1-docker.pkg.dev/cs115-449919/lumen-ai-repo/text-to-sql-app:latest
        # Add cache settings using GitHub Actions cache
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Get GKE Credentials
      run: |
        gcloud container clusters get-credentials lumenai-cluster \
          --project=cs115-449919 \
          --region=us-central1

    - name: Deploy to GKE
      run: |
        echo "Applying Kubernetes manifests..."
        # Explicitly set the image in the deployment using the SHA tag
        kubectl set image deployment/text-to-sql-app-deployment text-to-sql-container=us-central1-docker.pkg.dev/cs115-449919/lumen-ai-repo/text-to-sql-app:${{ github.sha }} --record
        # Apply other manifests (PVCs might already exist, Service unlikely to change often)
        kubectl apply -f k8s/pvc.yaml
        # Note: Don't apply secrets.yaml from repo, real secret is in cluster
        # Apply the rest of the deployment config (replicas, strategy etc.)
        # kubectl apply -f k8s/deployment.yaml.j2 # Cannot apply Jinja template directly
        # Apply the service config
        kubectl apply -f k8s/service.yaml
        echo "Waiting for deployment rollout..."
        kubectl rollout status deployment/text-to-sql-app-deployment --timeout=5m 